25.01.2022 (DD/MM/YYYY) 0.1.5.23


	Fixed
		- A typo in __netcode_ManagePresyn() that could crash a connect client.

	Added
		- 2 New Handshake methods
		
			Preshared RSA Key
			
			Preshared AES Key
			
			How they work can be viewed in .\changelog\v0.1.5.23 Handshake modes.jpg
			
			And within .\examples\basic examples\how to use different handshake methods.
			



22.01.2022 (DD/MM/YYYY) 0.1.5.22
	
	THIS VERSION IS INCOMPATIBLE WITH ALL PREVIOUS VERSIONS
	
	Fixed
		- _netcode_PresetEvent() was double writing default events to the $__net_arDefaultEventsForEachNewClientSocket array.
		
		- __netcode_Shutdown() was only removing the standard default events. Now the function will remove all default events.
	
	Added
		- __netcode_CryptDestroyKey() from CryptoNG to adequatly destroy keys for clean up.
	
	Changed
		- The __netcode_ManageHandshake_SubRandomRSA() handshake mode now additionally encrypts the RSA encrypted key with the
		preshared AES key. So that someone analyzing the packets in the same network cant see that RSA encrypted text is transmitted.
		
		- __netcode_SeedingClientStrings() now encrypts the PacketBegin and PacketEnd String. So that those strings no longer can be
		reversed to the Seed. Because these Srings get created from the Seed. This is also the first step to make the packet wrapper
		strings indistinguishable from the packet content.


22.01.2022 (DD/MM/YYYY) 0.1.5.21
	
	SCRIPT BREAKING CHANGES
	THIS VERSION IS INCOMPATIBLE WITH ALL PREVIOUS VERSIONS
	Head to the "What you need to change in your scripts." point to see what your script needs to be adjusted too.

	Fixed
		- Fixed 2 recursion issues that could have arised within __netcode_RemoveSocket() when the disconnected event called
		_netcode_TCPDisconnect() on another socket that also called the same function on the previous socket.
		
		__netcode_RemoveSocket(socket 1)
			_MyEvent_Disconnected(socket 1) (your event for socket 1)
				_netcode_TCPDisconnect(socket 2) (calling the disconnect on socket 2)
					__netcode_RemoveSocket(socket 2)
						_MyEvent_Disconnected(socket 2) (your event for socket 2)
							_netcode_TCPDisconnect(socket 1) (calling the disconnect on socket 1)
								__netcode_RemoveSocket(socket 1)
									_MyEvent_Disconnected(socket 1) (again)
										_netcode_TCPDisconnect(socket 2)
											__netcode_RemoveSocket(socket 2)
												_MyEvent_Disconnected(socket 2) (and again)
													_netcode_TCPDisconnect(socket 1)
														..... n (until crash)
														
		This no longer happens.
	
	Added
		- _netcode_StageGetExtraInformation(). Returns extra information for the given stage. Like the username that the client send
		in the user stage or the session key from the handshake stage. This func pretty much gives the exact same data as $vData was before,
		within the 'connection' event.
		
		- _netcode_GetCurrentStageName(). Returns the current stage the socket is in.
		
		- _netcode_StageGetError(). Returns the error the socket faced in the given stage.
		
		- _netcode_StageGetExtended(). Returns the extended codes that got set in the given stage for the socket.
		
		- _netcode_StageGetErrorDescription(). Converts the stage error into a Readable Information.
		
		- _netcode_StageGetExtendedDescription(). As above.
		
		- added a new performance example named "active clients response time test"
		
		The added functions could, for example, be used in the 'connection' or 'disconnected' event to either treat a specific error different or
		just to display the reason why something failed, either for debugging or something else.
		The Error 2 in Stage "user" with Extended 3 returned for a connect client for example means that the user gave the wrong username
		and password.
	
	Changes
	
		- The entire stage order and how they work got changed.
			The new order is as follows
			
			No Number. "connect"
			0. "auth"
			1. "presyn"
			2. "handshake"
			3. "syn"
			4. "user" (if enabled)
			5. "mfa" (not implemented)
			5. "ready" (accept client only aka server side)
			10. "netcode"
			
			How the stages work can be viewed in .\changelog\v0.1.5.21 stage reorder.jpg
			
			Tl;dr of the stage rework.
			The new system uses a pre shared key created from the socket seed, with which every pre handshake data is encrypted with.
			And the user stage on the connect client side can now return the right error.
			
		
		- The connection event no longer gets called with 3 params and no longer with an Integer stage ID.
			Func _MyEvent_Connection(Const $hSocket, $sStage)
			
			$hSocket = The socket
			$sStage = The Stagename as String
			
			The previous 3. param $vData got removed. But the data previously given with it can be retrieved with _netcode_StageGetExtraInformation().
			
			The connection event will be called when ever a stage successfully finished, just like before.
			
			
		- _netcode_TCPConnect() and _netcode_AuthToNetcodeServer() got a non blocking toggle.
			It is now possible to call both functions non blocking. This means that the functions will return with a socket even tho
			that the connection was not established yet. Those pending sockets get the new pending ID 3. _netcode_CheckSocket() will return that ID.
			
			Within _netcode_Loop() _netcode will check these pending sockets automatically or if they timeouted. If the connection
			succeded then the sockets are automatically added to _netcode and the connection event will be thrown.
			So you could already save data to a pending socket with _netcode_SocketSetVar() or add events to it with _netcode_SetEvent().
			
			If the connection attempt failed, for whatever reason, then the socket is removed and the disconnected event will be thrown.
			Any data that was stored to it will be, right after the event call, wiped, just like with every other socket usually.
			
			All pending sockets are bound to the fictive "000" socket. For that the "000" needs to be present.
			_netcode creates it itself. Said socket will also be removed once all pending sockes are gone and when no 
			other connect client is present.


		- A few inheritation integrations where also done. But the inheritation system is not done yet.
		
		- _netcode_SocketGetRecvBytesPerSecond() and _netcode_SocketGetSendBytesPerSecond() got optimised a little.
		
		_ $__net_bTraceEnable is now at default set to True if the Script is not compiled.
		
		- _netcode_TCPSend() now refuses to quo up packets if the socket is not in the required 'netcode' stage.
		
		- All examples got updated to the latest version.
		
	Removals
	
		- The backwards compatibility for plain text passwords on the server side, kept since v0.1.5.9, got removed.
		
		- The backwards compatibility for the connection and disconnected event, kept since v0.1.5, got removed too.
		
	What you need to change in your scripts.
		
		A maximum of 3 minor changes needs to be made.
		
		If you set the $arKeyPairs parameter in the func _netcode_TCPConnect() previously then remove that. That param is no longer present.
		
		If you use the "connection" event, either as default or as a socket specific then remove the 3rd param.
		The event can no longer look like this:	Func _Event_Connection($hSocket, $nStage, $vData).
		It has to look like this:				Func _Event_Connection($hSocket, $sStage)
		
		The second params in the "connection" event no longer gives the stage id as an Integer.
		Instead it now gives the stagename as String. So a socket is ready once it reached stage "netcode".
		Previously you might did this:		if $nStage <> 10 Then Return
		Now you do:							if $sStage <> "netcode" Then Return
		
		As a reminder, this version is entirely incompatible with any previous _netcode release.


10.01.2022 (DD/MM/YYYY) 0.1.5.20

	Fixed
		- _netcode_SocketGetRecvBytesPerSecond(), _netcode_SocketGetSendBytesPerSecond(), _netcode_SocketGetRecvPacketPerSecond(),
		_netcode_SocketGetSendPacketPerSecond() will no longer return old information.


07.01.2022 (DD/MM/YYYY) 0.1.5.19

	Fixed
		- Having a high $__net_nMaxRecvBufferSize could result in a Hang.
		The bug appeared in the file send example when the maxmimum buffer was set to 1048576 * 25.
		This bug persisted long before _netcode became public. The bug had a low priority because having such a high
		recv buffer is not necessary. The exacty reason why it is fixed is unknown to me. Some changes in the past must have
		fixed it.

	Additions
		- Added _netcode_CheckSocket(). This function will return the type of the socket.
		
		- Added _netcode_TCPDisconnectWhenReady(). This function is temporary and is ment to provide a way to only
		disconnect a socket once it could be made sure that the receiver actually received, managed and executed the last send
		packets.


06.01.2022 (DD/MM/YYYY) 0.1.5.18

	Fixed
		- A programming mistake within __netcode_ExecutePackets() which lead to _netcode not executing a
		received packet until a new arrived. The bug appeared when the packets with ID 999 and ID 0 where
		combined and send with the same TCP 'send' call and also received at the same time.
		The function simply didnt check if a packet with 0 existed after 999 was executed and didnt get
		called again until a new packet was received. In the end this could have lead to timeouts within
		functions like _netcode_UseNonCallbackEvent().


03.01.2022 (DD/MM/YYYY) 0.1.5.17

	Fixed
		- __netcode_SetVarType() couldnt convert a "True" or "False" string into Bool if the string was
		any different from "True" or "False", like "true", "TRUE" etc. This is fixed.
	
	Added
		- _netcode_Shutdown(). Will disconnect every known socket and close every opened dll.


03.01.2022 (DD/MM/YYYY) 0.1.5.16

	Added
		- _netcode_SocketSetVar() and _netcode_SocketGetVar() which allows custom data, of any kind, to
		be set to a Socket. The data is removed once the socket is removed or released from _netcode,
		but is still accessible within the disconnect event.
		
		- A new File Transfer example in .\examples\file send\netcode


02.01.2022 (DD/MM/YYYY) 0.1.5.15

	Fixed
		- __netcode_ExecutePackets() could crash in the event of a disconnect. An additional
		check is implemented to prevent that from happening
		
	Changed
		- __netcode_CreatePackage() and __netcode_ManageNetcode() a little to run tests with
		lznt compression. Compression not implemented yet.



01.01.2022 (DD/MM/YYYY) 0.1.5.14
	
	Fixed
		- Under the cirumstance that either _netcode_Loop(), _netcode_RecvManageExecute()
		or _netcode_UseNonCallbackEvent() was used in a Event then it could happend that
		__netcode_ExecutePackets() wrongly overwritten the execution buffer and because of it
		deleted packets. Overall, neither of the mentioned functions should be used within
		a Event, otherwise that might lead to a recursion crash.
		
		
	Additions
		- Added addtional Terminology describtions to the UDF header
		
		- Added a Fatal Tracer Warning when recursion is detected


30.12.2021 (DD/MM/YYYY) 0.1.5.13
	
	Hotfix
		- In __netcode_ManageNetcode() i forgot to set the BinaryToString conversion to use UTF8, when
		encryption was used for the given socket. If special characters where used then these got corrupted.
		
	Fixed
		- The issue mentioned in 0.1.5.10, with special characters, was partially fixed.
		If Encryption is toggled On for the given socket then no data corruption will appear. But still will
		if Encryption is toggled Off.
		

29.12.2021 (DD/MM/YYYY) 0.1.5.12

	Additions
		- UDF Headers. The UDF is far from being alpha, so dont take it as a sign. I just felt like writing them.
		
		- Concept Plan. Contains various ideas and is overall a todo list on the road to alpha.
		I generally made this roadmap to get a clearer view in which ways i need to overhaul or implement certain
		sub systems.


27.12.2021 (DD/MM/YYYY) 0.1.5.11

	Fixes
		- (1) if $bWaitForFloodPrevention was set to True for _netcode_TCPSend() and (2) while the function waited for the buffer to have enough space for the current packet and (3) if another packet was send through a event that might got called in the meant time, THEN _netcode_TCPSend() quod a packet with the wrong id and therefore triggered a packet safety response from the receiver. This was maybe the cause for the recent bug discovered in v0.1.5.10.
	
	Additions
		- Added a ConsoleWrite for when _netcode forces a disconnect duo to the recent bug from v0.1.5.10
		
	Changes
		- Optimised _netcode_TCPSend() and __netcode_CreatePackage(). Both funcs are not overhauled or faster now but they no longer produce the bug mentioned in Fixes.
		
		- If in a Event the socket gets closed or released from _netcode then __netcode_ExecutePackets() will stop the execution of further packets from now on.
	

22.12.2021 (DD/MM/YYYY) 0.1.5.10

	Fixes
		- Fixed _netcode_SocketGetUser(). When used on the clientside the function returned False previously.
		
		- Reverted a fix made in this update - (Fixed a bug where some characters where being converted to '?' on the receivers end). The issue lies in the StringToBinary and BinaryToString conversions within the __netcode_SendPacketQuo() and __netcode_RecvPackages() functions. I have to use $SB_UTF8 to create support for those chars, but doing so produces data corruption occasionally. I figured out why, but the conversion needs to be done in the packet creation (which has yet to be overhauled) to make sure no corruption happens.
		
	Changes
		- _netcode_TCPSend() got an extra check to validate that the socket data is ment to be send to, is actually known to _netcode. If it fails then @error will be 0 and @extended will be 1.
		
		- _netcode_UseNonCallbackEvent() now resets the data buffer when called. This change is done to prevent 'old' data to be retrieved with the current request.
		
		- Removed unnecessary development notes from the UDF header.
		
	Additions
		- _netcode_ClientGetParent() returns the parent socket of the given client socket
		
		- _netcode_GetParents() returns all known parent sockets managed by _netcode
		
		- Added additional Credits to the header for functions that where not made by me.
		
		- Added a License.
		
	Recently discovered bug
		- In VERY rare cases _netcode holds up a socket and requests packet resends indefinitely. _netcode then starts to flood the memory and no socket interactions can be made. This issue is so rare that i couldnt yet determine why it happens. But if it does then seemingly only with the first packets that get send in the 'netcode' stage. The process then either has to stop or the socket needs to be disconnected to fix the issue and to free the ram. Since i do not know exactly why it is caused i implemented a temporary patch which will disconnnect the socket if a packet resend is requested. This basically disables the packet safety systems for now, but thats much better then to have a BSOD because the ram is full.


14.11.2021 (DD/MM/YYYY) 0.1.5.9
	Fixes
		- Fixed a couple mistakes that lead to the inability of _netcode to process a disconnect, if the disconnect appeared during staging.
		
		- Removed a wrong placed WSAGetLastError call that had the effect that a disconnect error couldnt be catched when using _netcode_TCPConnect().
		
	Changes
		- The Client now no longer sends its plain user login password to the server, but instead its SHA256 hash. The Client hashes the plain text password by itself, so no code changes need to be done. The change was done to have the server never know what the plain text password of the user is and also because the plain text password will be used for a feature that comes with the Usermanagement overhaul, where the Server can allow its clients to have a encrypted container that only the clients have access too.
		
		The Server however still accepts the plain password and hashes it itself then for compatibility with older _netcode Versions. This compatibility patch however is not permanent and will be removed in a future version.


12.11.2021 (DD/MM/YYYY) 0.1.5.8
	
	Fixes
		- __netcode_AddPacketToQue() sometimes tried to add a socket with id "False" to the Send quo ($__net_arPacketSendQue). Duo to this 'select' stopped working and threw 10038 errors. The issue is patched but requires further investigation.
	
	
	Changes
		- The _netcode_SetEvent() function now accepts non callback events. If the $sCallback params is set with "" then the event becomes a non callback event. If Data is send to it then it gets saved to the event instead of given to a func with a Call(). Said data can then be retrieved with _netcode_GetEventData(). Non callback events only have a single data buffer, so new data will always overwrite the last if the last is not retrieved when the new arrives. _netcode_GetEventData() always returns an CallArgArray. So _netcode_sParams() can still be used.
		Once _netcode_GetEventData() is called it also will empty the buffer.
	
		- Added _netcode_UseNonCallbackEvent(). if called the func will send the specified data to the receiver and will only return once the receiver reported something back to this event or if the timeout run out. Similiar to the _netcode_SetEvent() this func will return an array.
		@error = 1 indicates a disconnect
		@error = 2 indicates a timeout
		
	Remarks
		Non Callback events should not be used to send multiple packets at once, but used for a single packet. So lets say your client wants to ask the Server something then the servers answer shouldnt exceed a single packet.
		
		example:
		$arAnswer = _netcode_UseNonCallbackEvent(socket, eventname the answer goes to, eventname the request goes to, data you want to add to the request, timeout in ms)
		
		The "eventname the answer goes to" has to be a Non Callback Event.
		The function when called will request an answer from the other side and when it arrives then return it to $arAnswer.
		
		So this addition can be used similiar to how you use your local functions but with the exeption that it can fail because of either a disconnect or a timeout.
	

03.11.2021 (DD/MM/YYYY) 0.1.5.7
	
	Fixes
		- A couple bugs
		
	Changes
		- Recoded the BytesPerSecond functions to be more efficient
	
	
02.11.2021 (DD/MM/YYYY) 0.1.5.6
	
	Changes
		- The latest change in 0.1.5.5 with the packet safety system got optionalized with $__net_bPacketConfirmation and is at default set to True. This means that _netcode will use the previous system where the receiver sends a packet confirmation packet to the sender. This was done duo to a couple issues with the packet safety systems. It is required to overhaul the packet safety in a way that isnt done quickly to fully switch to the new non packet confirmation packet system.

	Bugs
		- In very rare cases _netcode seems to become stuck. The issues is so rare that it yet wasnt possible to determine why that is the case. Maybe it doesnt even have anything todo with _netcode but with the example where i noticed it.
		
		- The Packet overflow protection is currently not fully working duo to the latest change in 0.1.5.5. Packets will be rejected if the socket is set OnHold, because the sender can currently not get a notice about that. This bug will only appear if $__net_bPacketConfirmation is set to False.
		
		- Adding to the last bug _netcode_SetSocketOnHold() is not working at all if used individually because _netcode internally resets the OnHold status if a requirement is meet. To those not knowing what this function even is. With it it is possible to stop _netcode from executing packets from the given socket. This can be used in various ways for example to pause or limit a socket or multiple to either priotize another or just to pause a server. But this option is also used internally by _netcode if a packet loss or packet corruption got detected so that the packets get executed in order. For that _netcode stops the execution of the socket (aka setting it OnHold) until the lost or corrupted packet got resend by the sender. The OnHold status is then reverted. As of now _netcode internally uses the same functions as the user can do individually. This is why it fails if used individually, because _netcode thinks it has set the Socket OnHold by its own and resets it when everything is alright with the execution buffer. To fix the issue, i need to split the internal OnHold function from the individually usable functions. This is easy but i want to improve this feature so that certain things can be set OnHold for a socket or multiple.


02.11.2021 (DD/MM/YYYY) 0.1.5.5

	Fixes
		- Fixed a non problematic issue with the _storageS_Overwrite() function that ignores variable assigning if its initialized with the value of Bool False. The function also ignored the variable creation if the value was 0 duo to "if $var = False" being True.

	Changes
		- The Packet Safety system got changed. Previously the Receiver always confirmed to the Sender that it received the send data.
		Duo to this the Receiver could send as much packets to the Sender as the Sender send to the Receiver. The problematic was that this created much more traffic then was necessary. TCP is ment to be safe, if a packet is lost then the operating systems themself will request and resend them. I read over multiple articles that thats not always true and that why implemented the packet confirmation. However i changed the packet safety to a different format. Socket Select is now used to determine if the send packets are in fact received. If the case then the packets get removed from the Safety Buffer. The main functionality of the buffer however remains. The Receiver can still request lost and corrupted packets from the sender if the Operating System doesnt do it.
		
		- The Nagle algorithm for Sockets now gets disabled with each TCPAccept and TCPConnect socket for more Performance.
		
	Current Problematics
		- The Problematic mentioned in 0.1.4 still persists and is further investigated because it is yet not very clear if the issue lies in the software or a hardware. Previous thoughts got me thinking that its the Nagle algorithm, but disabling it didnt improve the performance in the way i hoped. Tcp windows will be investigated next.

25.10.2021 (DD/MM/YYYY) 0.1.5.4
	Fixes
		- both the __netcode_SocketSetSendBytesPerSecond() and __netcode_SocketSetRecvBytesPerSecond() function could rarely crash
		duo to a missing check. That was fixed.
		
	Additions
		- _netcode_SocketGetRecvPacketPerSecond() and _netcode_SocketGetSendPacketPerSecond() got added. Both function retrieve the amount of packets that are send and received. If a parent is given then the functions will add the packet counts of all clients together.
		
	Changes
		- the internal packet confirmation implementation got changed. Previously each packet got confirmed to the sender once it got executed. Duo to that the server send exactly the same amount of packets out that came in. This is changed. The Receiver now collects the ids of the Packets it executed and send them after the exeuction of all in a single packet. This reduced the receiver responses dramatically.


24.10.2021 (DD/MM/YYYY) 0.1.5.3
	Additions
		- _netcode_GetDynamicPacketContentSize() got implemented. While working in this project i noticed that certain
		packet sizes work better then others. A larger packet size of 1.25 MB for example worked very well for the 'netcode' managemode
		on my pc. But the packet size of 0.1 MB best on the 'rawlinked' managemode. Both values are not the best for every pc, the overall best packet size for performance seems to vary from pc to pc. Thats why i implemented said function. However the function is not ment to be used yet and because of it out commented.
		
	Changes
		- The Default Recv Len in the UDF Header got changed to 256 KB instead of the previous 1.25 MB
		
		- The functions that counted the send and received bytes where implemented in a new way. In the previous they where placed
		in a inefficient way and besides that the func that counted the send bytes was prone to fail because __netcode_TCPSend() that is set to not block wasnt, because of this, always returning the send bytes. Therefore these couldnt be counted.
		
	Remarks
		- The previous inefficient addition of the BytesPerSecond function slowed down the UDF by about 15 MB/s. Duo to the recent change the lost performance was nearly completly recovered.


24.10.2021 (DD/MM/YYYY) 0.1.5.2
	Additions
		- _netcode_SocketGetSendBytesPerSecond() and _netcode_SocketGetRecvBytesPerSecond() got added.
		Both functions can be used to obtain the send and received bytes per second for a given socket.
		If a parent socket is given, then the funcs read the bytes per second for each client and add them together.
		Overall both funcs should be quite accurate, but information is delayed by 1 second. So if you call said functions
		then you get returned what was calculated the last second.
		
	Changes
		- __netcode_TCPRecv() now no longer returns @extended = 1 when 'recv' returned 0 for a gracefull disconnect. In that case said func will return @error = 1. @extended is now used only for __Trace_Error() and to contain the recv bytes len for the funcs from above.


23.10.2021 (DD/MM/YYYY) 0.1.5.1
	Fixes
		- Said security issue mentioned in 0.1.5 was repatched, after reevaluating my last patch, to provide greater security and to make it impossible to guess the session key through the Seed
		
	Changes
		- The password len for the session key is now extended to 40 Chars.


21.10.2021 (DD/MM/YYYY) 0.1.5
	Changes
		- MILDLY SCRIPT BREAKING CHANGE
		The disconnect event got overhauled. The corresponding disconnect function, if set at all, now requires 3 params or the call will fail. If you dont use the disconnect event at all then you can ignore that.
		1 $hSocket
		2 $nDisconnectError = disconnect error can be 10050 to 10054. if it is 0 then the socket was disconnected gracefully
		3 $bDisconnectTriggered = if _netcode_TCPDisconnect() is used then this value will be True. But only for the side that called it.
		
		The general idea of that change is that a user of the UDF can do actions based around these errors. So a non zero error could mean that the connection was lost and that a reconnect should be tried. MsgBoxes can also be displayed with more usefull information because of that.
		
		If the disconnect event callback still just has a single param for the socket then netcode notices that and will try to call it with just a single param after calling it with 3 failed.


		- The connection event got overhauled and requires now 3 params or the call will fail. Similiar to the overhauled disconnect event _netcode wil notice a wrong amount of params and will call the event with just two in that case then.
		1 $hSocket
		2 $nStage = succeded stage number
		3 $vData = will give additional data of the stage that can be of any variable type
		
		additional informations are:
		Stage 0 (auth) = nothing
		Stage 1 (handshake) = session key
		Stage 2 (user) = Username
		Stage 3 (2FA) ) = not implemented yet
		Stage 4 (presyn) = an array containing the server settings the client inherits
		Stage 5 (syn) = not implemented yet
		Stage 9 (ready) = nothing
		Stage 10 (netcode) = nothing

		
		- The default 'connection' and 'disconnected' events are now invalid events for _netcode_TCPSend(). If a packet with this event is send it will be rejected by the receiver. This is done to protect these events because they are only ment to be used locally to get information about a connection and a disconnect. We dont want the sender to misuse that. Besides that _netcode_TCPSend() also notifies about this invalid event.
		
		
	Security Issue
		- Duo to SRandom in the yet not fully implemented Seeding system the Random Passwort Generation is influenced by that. Said bug is a big Security issue and is just patched by generating a random number in the header of the UDF. This issue will be faced further once the diffie hellman key exchange is implemented. This issue was just noticed while doing the changes to the connection event.
		
		
	
21.10.2021 (DD/MM/YYYY) 0.1.4
	Changes
		- __netcode_SendPacketQuo() got overhauled. The function now makes use of 'select' instead of pushing dllcalls to 'send' until it gave a non 10035.
	
	Current Problematics
		- When connecting to a computer thats not localhost but a pc in the same network, or in the internet or the same pc but over the external ip and when then sending data to said computer then _netcode never seems to get never faster then a specific MB/s no matter the settings. This issue might only exists in my network, because i also observed the same on other applications like a FTP and HTTP server that i have setuped for testing. It was never possible to exceed 12 Mb/s even so that any device in my local network should be capable to transmit more then 200 Mb/s. Further investigation of the problematic showed me that it has something todo with windows sending or receiving data delayed. There seems to be some kind of reason why data is sucessfully send at 00:00.000 (Hour:Minute.MSec) but only availble to be received around 00:00.100 (difference of 100 ms). My current guess is that windows doesnt send the data imidiatly but in intervalls and that i only have todo something code wise to tell windows to priotize said data, but i yet havent found out how and if thats really where the issue lays. 
	
	Remarks
		- Duo to the latest change _netcode got faster.
			'netcode' managemode got up to ~86 MB/s
			'rawlinked' managemode got up to ~220 MB/s


16.10.2021 (DD/MM/YYYY) 0.1.3
	Fixes
		- A small bug appeared that made both the server and client incapable to detect that the socket was disconnected.
		The bug lied in the recently overhauled __netcode_SendPacketQuo() that didnt check errors reported from WSAGetLastError. Besides that a typo in __netcode_TCPRecv() was made where _netcode should only check for errors > 10000 but was set to check < 10000.
		

16.10.2021 (DD/MM/YYYY) 0.1.2
	Fixes
		- A mayor bug was partially patched where the server send a 'netcode' packet when the client hasnt yet received the presyn packet. This bug created a AES Decrypt error on the client side and made it impossible to sucessfully stage through the presyn phase. This bug will be fully resolved once the stages get their own packet format and can then send misplaced 'netcode' packets to the incomplete packet buffer.
		
		- __netcode_TCPRecv() sometimes reported a disconnect even so there was none. That was because of WSAGetLastError returning error 5 for "ERROR_ACCESS_DENIED". That was fixed.
		
	Changes
		- To fix the first bug from above a new temporary stage was introduced. Stage number 9 named "ready".
		
		
	Remarks
		- The newly intoduced stage will send the incoming packet directly to the netcode manager. So this version is backwards compatible to 0.1
		


13.10.2021 (DD/MM/YYYY) 0.1.1
	Fixes
		- If $bWaitForFloodPrevention was set to True (Default) in _netcode_TCPSend() while the function waited for the Partners
		Buffer to be empty enough to quo up new data, but the socket disconnected in the mean time, then the Func became stuck
		and threw alot of errors. This is fixed. The func now checks if the socket still exists before it calls
		_netcode_RecvManageExecute() and if not then returns @extended = 1 and "Socket is no longer known or disconnected" if
		the Tracer is enabled.
	
	Changes
		- __netcode_SendPacketQuo() was recoded and __netcode_TCPSend() got the optional param to no longer wait for 'send' to
		succeed. __netcode_SendPacketQuo() was recoded in a way that the func will no longer block until the quod data is send.
		The UDF now much better utilizes the non blocking feature. So a slower client, in terms of internet speed or latency,
		will no longer slow down the speed of the others. However __netcode_SendPacketQuo() is marked for recoding because its
		current codework is inefficient.
		
		- The Globals vars on the beginning of the UDF are now sorted and feature describtions. These Options can be changed at
		will. This is temporary. These Globals will be removed and linked to each parent and client so that each socket can
		have its own set of settings. You will have to use the options functions to change settings then.
		
	Upgrades
		- Duo to the changes of the packet quo and tcp send feature the UDF got faster:
			'netcode' managemode got up to ~71 MB/s
			'rawlinked' managemode got up to ~210 MB/s
		