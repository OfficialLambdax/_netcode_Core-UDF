21.10.2021 (DD/MM/YYYY) 0.1.5
	Changes
		- MILDLY SCRIPT BREAKING CHANGE
		The disconnect event got overhauled. The corresponding disconnect function, if set at all, now requires 3 params or the call will fail. If you dont use the disconnect event at all then you can ignore that.
		1 $hSocket
		2 $nDisconnectError = disconnect error can be 10050 to 10054. if it is 0 then the socket was disconnected gracefully
		3 $bDisconnectTriggered = if _netcode_TCPDisconnect() is used then this value will be True. But only for the side that called it.
		
		The general idea of that change is that a user of the UDF can do actions based around these errors. So a non zero error could mean that the connection was lost and that a reconnect should be tried. MsgBoxes can also be displayed with more usefull information because of that.
		
		If the disconnect event callback still just has a single param for the socket then netcode notices that and will try to call it with just a single param after calling it with 3 failed.


		- The connection event got overhault and requires now 3 params or the call will fail. Similiar to the overhault disconenct event _netcode wil notice a wrong amount of params and will call the event with just two in that case then.
		1 $hSocket
		2 $nStage = succeded stage number
		3 $vData = will give additional data of the stage that can be of any variable type
		
		additional informations are:
		Stage 0 (auth) = nothing
		Stage 1 (handshake) = session key
		Stage 2 (user) = Username
		Stage 3 (2FA) ) = not implemented yet
		Stage 4 (presyn) = an array containing the server settings the client inherits
		Stage 5 (syn) = not implemented yet
		Stage 9 (ready) = nothing
		Stage 10 (netcode) = nothing

		
		- The default 'connection' and 'disconnected' events are now invalid events for _netcode_TCPSend(). If a packet with this event is send it will be rejected by the receiver. This is done to protect these events because they are only ment to be used locally to get information about a connection and a disconnect. We dont want the sender to misuse that. Besides that _netcode_TCPSend() also notifies about this invalid event.
		
		
	Security Issue
		- Duo to SRandom in the yet not fully implemented Seeding system the Random Passwort Generation is influenced by that. Said bug is a big Security issue and is just patched by generating a random number in the header of the UDF. This issue will be faced further once the diffie hellman key exchange is implemented. This issue was just noticed while doing the changes to the connection event.
		
		
	
21.10.2021 (DD/MM/YYYY) 0.1.4
	Changes
		- __netcode_SendPacketQuo() got overhauled. The function now makes use of 'select' instead of pushing dllcalls to 'send' until it gave a non 10035.
	
	Current Problematics
		- When connecting to a computer thats not localhost but a pc in the same network, or in the internet or the same pc but over the external ip and when then sending data to said computer then _netcode never seems to get never faster then 12 MB/s no matter the settings. This issue might only exists in my network, because i also observed the same on other applications like a FTP and HTTP server that i setup for testing. It was never possible to exceed 12 Mb/s even so that any device in my local network should be capable to transmit more then 200 Mb/s. Further investigation of the problematic showed me that it has something todo with windows sending or receiving data delayed. There seems to be some kind of reason why data is sucessfully send at 00:00.000 (Hour:Minute.MSec) but only availble to be received around 00:00.100 (difference of 100 ms). My current guess is that windows doesnt send the data imidiatly but in intervalls and that i only have todo something code wise to tell windows to priotize said data, but i yet havent found out how and if thats really where the issue lays. 
	
	Remarks
		- Duo to the latest change _netcode got faster.
			'netcode' managemode got up to ~86 MB/s
			'rawlinked' managemode got up to ~220 MB/s


16.10.2021 (DD/MM/YYYY) 0.1.3
	Fixes
		- A small bug appeared that made both the server and client incapable to detect that the socket was disconnected.
		The bug lied in the recently overhauled __netcode_SendPacketQuo() that didnt check errors reported from WSAGetLastError. Besides that a typo in __netcode_TCPRecv() was made where _netcode should only check for errors > 10000 but was set to check < 10000.
		

16.10.2021 (DD/MM/YYYY) 0.1.2
	Fixes
		- A mayor bug was partially patched where the server send a 'netcode' packet when the client hasnt yet received the presyn packet. This bug created a AES Decrypt error on the client side and made it impossible to sucessfully stage through the presyn phase. This bug will be fully resolved once the stages get their own packet format and can then send misplaced 'netcode' packets to the incomplete packet buffer.
		
		- __netcode_TCPRecv() sometimes reported a disconnect even so there was none. That was because of WSAGetLastError returning error 5 for "ERROR_ACCESS_DENIED". That was fixed.
		
	Changes
		- To fix the first bug from above a new temporary stage was introduced. Stage number 9 named "ready".
		
		
	Remarks
		- The newly intoduced stage will send the incoming packet directly to the netcode manager. So this version is backwards compatible to 0.1
		


13.10.2021 (DD/MM/YYYY) 0.1.1
	Fixes
		- If $bWaitForFloodPrevention was set to True (Default) in _netcode_TCPSend() while the function waited for the Partners
		Buffer to be empty enough to quo up new data, but the socket disconnected in the mean time, then the Func became stuck
		and threw alot of errors. This is fixed. The func now checks if the socket still exists before it calls
		_netcode_RecvManageExecute() and if not then returns @extended = 1 and "Socket is no longer known or disconnected" if
		the Tracer is enabled.
	
	Changes
		- __netcode_SendPacketQuo() was recoded and __netcode_TCPSend() got the optional param to no longer wait for 'send' to
		succeed. __netcode_SendPacketQuo() was recoded in a way that the func will no longer block until the quod data is send.
		The UDF now much better utilizes the non blocking feature. So a slower client, in terms of internet speed or latency,
		will no longer slow down the speed of the others. However __netcode_SendPacketQuo() is marked for recoding because its
		current codework is inefficient.
		
		- The Globals vars on the beginning of the UDF are now sorted and feature describtions. These Options can be changed at
		will. This is temporary. These Globals will be removed and linked to each parent and client so that each socket can
		have its own set of settings. You will have to use the options functions to change settings then.
		
	Upgrades
		- Duo to the changes of the packet quo and tcp send feature the UDF got faster:
			'netcode' managemode got up to ~71 MB/s
			'rawlinked' managemode got up to ~210 MB/s
		